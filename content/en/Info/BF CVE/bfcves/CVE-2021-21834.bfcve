<?xml version="1.0" encoding="utf-8"?>
<!--Bugs Framework (BF) Tool, I. Bojanova, NIST, 2020-2024-->
<BFCVE ID="CVE-2021-21834" Title="Bad Alloc in GPAC v1.0.1" Description="Missing verification on the range for the user-controlled 'nb_entries' ((u64)ptr-&gt;nb_entries * sizeof(u64) must not be greater than a 32-bit int) results in an inconsistent value, which becomes a wrong argument for the multiplication ‘*’ operator in 'ptr-&gt;nb_entries * sizeof(u64)' . The result wraps around (integer overflow on a 32-bit platform) and becomes a small number used to allocate not enough memory for the  'ptr-&gt;offsets[entries]' buffer, allowing a pointer reposition over its bounds, which, when used to write leads to  a heap buffer overflow. If exploited, this can lead to denial of service or arbitrary (remote) code execution.&#xD;&#xA;//generated//&#xD;&#xA;Missing Code  to Range Verify '(u64)ptr-&gt;nb_entries * sizeof(u64') (must not be greater than a 32-bit int) in Third-Party src/isomedia/box_code_base.c: 41 leads to Inconsistent Value 'nb_entries'&#xD;&#xA;&#xD;&#xA;, which propagates to Wrong Argument in '(ptr-&gt;nb_entries * sizeof(u64))' Operator   Calculate in Third-Party src/isomedia/box_code_base.c: 54 resulting in   Wrap Around (integer overflow on a 32-bit platform)&#xD;&#xA;&#xD;&#xA;, which propagates to Wrong Size in 'ptr-&gt;offsets = (u64 *) gf_malloc'(ptr-&gt;nb_entries * sizeof(u64) );' (size is too small) Explicit   Allocate in Third-Party src/isomedia/box_code_base.c: 54 resulting in  Heap Not Enough Memory &#xD;&#xA;&#xD;&#xA;, which propagates to Not Enough Memory in 'for (entries = 0; entries &lt; ptr-&gt;nb_entries; entries++)' Sequential   Reposition in Third-Party src/isomedia/box_code_base.c: 57 resulting in  Heap Over Bounds Pointer 'ptr-&gt;offsets[entries]'&#xD;&#xA;&#xD;&#xA;, which propagates to Over Bounds Pointer in 'ptr-&gt;offsets[entries] = gf_bs_read_u64(bs);' Sequential   Write in Third-Party src/isomedia/box_code_base.c: 58 resulting in  Heap Buffer Overflow &#xD;&#xA;&#xD;&#xA;. If exploited this can lead to ACE or DOS." Author="Irena Bojanova, Carlos Calhardo" Date="2023-02-19T19:11:09" Score="8.8" Criteria="gpac:gpac:1.0.1" BugReport="https://talosintelligence.com/vulnerability_reports/TALOS-2021-1297" CodeWithBug="https://github.com/gpac/gpac/blob/v1.0.1/src/isomedia/box_code_base.c" CodeWithFix="https://github.com/gpac/gpac/commit/b515fd04f5f00f4a99df741042f1efb31ad56351" CommitId="">
  <DefectWeakness Class="DVR" ClassType="_INP" Language="C" File="src/isomedia/box_code_base.c" Trace="" Line="">
    <Cause Type="Code">Missing Code</Cause>
    <Operation Comment="'(u64)ptr-&gt;nb_entries * sizeof(u64') (must not be greater than a 32-bit int)">Verify</Operation>
    <Consequence Comment="'nb_entries'" Type="Data">Inconsistent Value</Consequence>
    <Attributes>
      <Operand Name="Data">
        <Attribute Type="State">Stored</Attribute>
      </Operand>
      <Operation>
        <Attribute Comment="(u64)ptr-&gt;nb_entries &lt;=  (u64)SIZE_MAX / sizeof(u64)" Type="Mechanism">Range</Attribute>
        <Attribute Comment="src/isomedia/box_code_base.c#L41" Type="Source Code">Third-Party</Attribute>
        <Attribute Type="Execution Space">Local</Attribute>
      </Operation>
    </Attributes>
  </DefectWeakness>
  <Weakness Class="TCM" ClassType="_DAT" Language="C" File="src/isomedia/box_code_base.c" Trace="" Line="54">
    <Cause Comment="in '(ptr-&gt;nb_entries * sizeof(u64))'" Type="Data">Wrong Argument</Cause>
    <Operation>Calculate</Operation>
    <Consequence Comment="(integer overflow on a 32-bit platform)" Type="Data">Wrap Around</Consequence>
    <Attributes>
      <Operand Name="Name">
        <Attribute Type="State">Bound</Attribute>
      </Operand>
      <Operand Name="Data">
        <Attribute Comment="u32 integer" Type="Kind">Numeric</Attribute>
      </Operand>
      <Operand Name="Type">
        <Attribute Comment="GF_ChunkLargeOffsetBox *ptr" Type="Kind">Structure</Attribute>
      </Operand>
      <Operation>
        <Attribute Comment="multiplication ‘*’" Type="Mechanism">Operator</Attribute>
        <Attribute Comment="src/isomedia/box_code_base.c#L54" Type="Source Code">Third-Party</Attribute>
        <Attribute Type="Execution Space">Local</Attribute>
      </Operation>
    </Attributes>
  </Weakness>
  <Weakness Class="MMN" ClassType="_MEM" Language="C" File="src/isomedia/box_code_base.c" Trace="" Line="54">
    <Cause Comment="in 'ptr-&gt;offsets = (u64 *) gf_malloc'(ptr-&gt;nb_entries * sizeof(u64) );' (size is too small)" Type="Data">Wrong Size</Cause>
    <Operation>Allocate</Operation>
    <Consequence Type="Size">Not Enough Memory</Consequence>
    <Attributes>
      <Operand Name="Address">
        <Attribute Type="State">Heap</Attribute>
      </Operand>
      <Operation>
        <Attribute Comment="gf_malloc()" Type="Mechanism">Explicit</Attribute>
        <Attribute Comment="src/isomedia/box_code_base.c#L54" Type="Source Code">Third-Party</Attribute>
        <Attribute Type="Execution Space">Userland</Attribute>
      </Operation>
    </Attributes>
  </Weakness>
  <Weakness Class="MAD" ClassType="_MEM" Language="C" File="src/isomedia/box_code_base.c" Trace="" Line="57">
    <Cause Comment="in 'for (entries = 0; entries &lt; ptr-&gt;nb_entries; entries++)'" Type="Size">Not Enough Memory</Cause>
    <Operation>Reposition</Operation>
    <Consequence Comment="'ptr-&gt;offsets[entries]'" Type="Address">Over Bounds Pointer</Consequence>
    <Attributes>
      <Operand Name="Address">
        <Attribute Type="State">Heap</Attribute>
      </Operand>
      <Operand Name="Size">
        <Attribute Type="Kind">Used</Attribute>
      </Operand>
      <Operation>
        <Attribute Type="Mechanism">Sequential</Attribute>
        <Attribute Comment="src/isomedia/box_code_base.c#L57" Type="Source Code">Third-Party</Attribute>
        <Attribute Type="Execution Space">Userland</Attribute>
      </Operation>
    </Attributes>
  </Weakness>
  <Weakness Class="MUS" ClassType="_MEM" Language="C" File="src/isomedia/box_code_base.c" Trace="" Line="58">
    <Cause Comment="in 'ptr-&gt;offsets[entries] = gf_bs_read_u64(bs);'" Type="Address">Over Bounds Pointer</Cause>
    <Operation>Write</Operation>
    <Consequence Type="Memory Corruption/Disclosure">Buffer Overflow</Consequence>
    <Attributes>
      <Operand Name="Address">
        <Attribute Type="State">Heap</Attribute>
      </Operand>
      <Operand Name="Size">
        <Attribute Type="Kind">Used</Attribute>
      </Operand>
      <Operation>
        <Attribute Type="Mechanism">Sequential</Attribute>
        <Attribute Comment="src/isomedia/box_code_base.c#L58" Type="Source Code">Third-Party</Attribute>
        <Attribute Type="Execution Space">Userland</Attribute>
      </Operation>
    </Attributes>
  </Weakness>
  <Failures ClassType="_FLR">
    <Cause Comment="system crash" Type="Memory Corruption/Disclosure">Buffer Overflow</Cause>
    <Failure Class="ACE" />
    <Failure Class="DOS" />
  </Failures>
</BFCVE>